import os
import numpy.random as numpy_rand
from scipy.stats import stats
import random


class Factories:
    @staticmethod
    def generateStudentRoaster(_numberOfStudents: int, studentEmailFormat: str = "<username>@realschool.edu",
                               studentIdFormat: str = "1086#####") -> list[dict]:
        """
        :Description:

        This function generates a sample roaster for a canvas class.

        """
        pass

    @staticmethod
    def generateStudentGradescopeGradesForAssignment(_studentRoaster: list[dict], _assignmentName: str,
                                                     _assignmentPoints: int):
        """
        :Description:

        This function generates a gradescope gradesheet for the student roaster. It will randomly generate scores, missing assignments, and lateness.

        Calls ``Factories.generateSingleStudentGradescopeGrade`` internally.
        Calls ``Factories.writeOutGradescopeGrades`` internally.

        This data will be written out to  ``./gradescope/{_assignmentName}_test_scores.csv``.

        :param _studentRoaster: A student roaster generated by ``Factories.generateStudentRoaster``.
        :param _assignmentName: The name of the assignment that grades are being generated for.
        :param _assignmentPoints: The max number of points for this assignment
        """

        # seed random for reproducibility
        random.seed(12345)

        # Students submit assignments on average with 80% success
        availableStatus: list[str] = ["Ungraded", "Missing", "Graded"]
        statusSelProb: list[float] = [0.0, 0.2, 0.8]

        # About 5% students submit work late
        studentLate: list[str] = ["Late", "NotLate"]
        studentLateSelProb: list[float] = [.05, .95]

        # Seed scipy for reproducibility
        numpyGenerator = numpy_rand.Generator(numpy_rand.MT19937(12345))
        stats.truncnorm.random_state = numpyGenerator

        # On average students get an 75% - 80% with a standard deviation of 12% - 15%. Using a 80% avg and a 13% std for this
        gradeDist: stats.truncnorm = stats.truncnorm(mean=_assignmentPoints * .8, std=_assignmentPoints * .13,
                                                     low=0, upper=_assignmentPoints)

        gradeSheet: list[str] = []
        for student in _studentRoaster:
            studentStatus: str = random.choices(population=availableStatus, weights=statusSelProb, k=1)[0]

            studentLateness: float | None
            if studentStatus == "Missing":
                studentLateness = None
            elif random.choices(population=studentLate, weights=studentLateSelProb, k=1)[0] == "Late":
                studentLateness = random.uniform(.25, 48.0)
            else:
                studentLateness = 0

            gradeSheet.append(
                Factories.generateSingleStudentGradescopeGrade(student, int(gradeDist.rvs),
                                                               _assignmentPoints, studentStatus, studentLateness))

        Factories.writeOutGradescopeGrades(f"{_assignmentName}_test_scores.csv", gradeSheet)

    @staticmethod
    def generateSingleStudentGradescopeGrade(_studentRoasterEntry: dict, _studentScore: float,
                                             _assignmentPoints: int, _status: str, _lateness: float | None) -> str:
        """
        :Description:

        Generates an entry for a Gradescope gradesheet for a single student. These are stored as CSVs

        returns in format ``{First Name},{Last Name},{Student ID},{Student Email},{Student Score},{Max Score},{Lateness}``

        :param _studentRoasterEntry: The student to create an entry for. Should be generated by ``Factories.generateStudentRoaster``
        :param _studentScore: The score the student received on their submission.
        :param _assignmentPoints: The max number of points for this assignment.
        :param _status: The status for the student's submission. Must be ``Graded``, ``Missing``, or ``Ungraded``.
        :param _lateness: How late the students submission was. Stored in hours. If ``None`` is set then ``_status`` must be ``Missing``

        :returns: A line for a CSV file representing the student's raw grade for this assignment
        """

        if not (_status == "Graded" or _status == "Missing" or _status == "Ungraded"):
            raise Exception(f"Invalid status for Gradescope: {_status}")

        if (_status == "Missing" and _lateness is not None) or (_lateness is None and _status != "Missing"):
            raise Exception(f"Parameter mismatch for Gradescope. Lateness must be \'None\' if status is \'Missing\'")

        formattedLateness: str = ""

        if _lateness is not None:
            seconds: float = _lateness * 60 * 60
            minutes: int = int(seconds // 60)
            seconds -= minutes * 60
            hours: int = int(minutes // 60)
            minutes -= hours * 60
            formattedLateness = f"{hours:02.0f}:{minutes:02.0f}:{seconds:02.0f}"

        formattedEntry: str = ""

        # add all the information about the student
        # add first name
        formattedEntry += f"{_studentRoasterEntry['Name'].split(' ')[0]},"
        # add last name
        formattedEntry += f"{_studentRoasterEntry['Name'].split(' ')[1]},"
        formattedEntry += f"{_studentRoasterEntry['SIS_SID']},"
        formattedEntry += f"{_studentRoasterEntry['email']},"

        # add submission info
        formattedEntry += f"{_studentScore:.2f},"
        formattedEntry += f"{_assignmentPoints},"
        formattedEntry += f"{formattedLateness}"

        return formattedEntry

    @staticmethod
    def writeOutGradescopeGrades(_fileName: str, _gradeSheet: list[str]):
        """
        :Description:

        This function writes out the gradescope gradesheet to ``gradescope/{_fileName}``.

        It also injects the correct header for a gradescope gradesheet.

        :param _fileName: The file name to write to.
        :param _gradeSheet: The gradesheet to write.
        """

        if not os.path.exists("./gradescope") or not os.path.isdir("./gradescope"):
            os.makedirs("./gradescope")

        gradesheetWriter = open(f"./gradescope/{_fileName}", "x")

        header: str = "First Name,Last Name,SID,Email,Total Score,Status,Lateness (H:M:S)"
        gradesheetWriter.write(f"{header}\n")

        for line in _gradeSheet:
            if line.count(',') != header.count(','):
                raise Exception("Invalid CSV Row for Gradescope Gradesheet")
            gradesheetWriter.write(f"{line}\n")

        gradesheetWriter.close()
